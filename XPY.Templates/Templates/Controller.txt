using System;
using System.Collections.Generic;
using System.Linq;
using System.Dynamic;
using System.Security.Cryptography;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using XWidget.Web.Jwt;
using XWidget.Web.Exceptions;
using XWidget.Linq;
using @(ViewBag.SlnName).Base.Authorization;
using @(ViewBag.SlnName).Base.Mvc;
using @(ViewBag.SlnName).Logic;
using @(ViewBag.SlnName).Models.EF;
using @(ViewBag.SlnName).Models.EF.Attributes;

namespace @(ViewBag.SlnName).Controllers {
    public class @(ViewBag.ModelName)Controller : BaseController<@(ViewBag.lastnamespace)Manager, @(ViewBag.lastnamespace)Context> {
        public @(ViewBag.ModelName)Controller(
            @(ViewBag.lastnamespace)Manager manager,
            ILogger<@(ViewBag.ModelName)Controller> logger) : base(manager, logger) {

        }

        /// <summary>
        /// 取得列表分頁結果
        /// </summary>
        /// <param name="keyword">關鍵字</param>
        /// <param name="keyword_property">關鍵字</param>
        /// <param name="match">匹配模式(JSON格式)</param>
        /// <param name="order">排序方法</param>
        /// <param name="skip">起始索引</param>
        /// <param name="take">取得筆數</param>
        /// <returns>分頁結果</returns>
        [HttpGet]
        public async Task<Paging<@(ViewBag.ModelName)>> List(
		    [FromQuery]string keyword = null,
			[FromQuery]string[] keyword_property = null,
            [FromQuery]string match = null,
            [FromQuery]string[] order = null,
            [FromQuery]int skip = 0,
            [FromQuery]int take = 10) {
			#region 修正排序屬性大小寫問題
			string FixPropertyCase(string property) {
                var propertyInfo =
                    typeof(@(ViewBag.ModelName)).GetProperty(
                        property,
                        BindingFlags.Instance | BindingFlags.Public | BindingFlags.IgnoreCase);

                if(propertyInfo == null) {
                    throw new ParameterException();
                }

                return propertyInfo.Name;
            }
			#endregion

            IQueryable<@(ViewBag.ModelName)> list = null;

			// 關鍵字搜尋判斷
			if (string.IsNullOrWhiteSpace(keyword)) {
				list = await Manager.ListAsync<@(ViewBag.ModelName)>();
			} else {
				// 搜尋屬性範圍
				if (keyword_property == null || keyword_property.Length == 0) {
					list = await Manager.SearchAsync<@(ViewBag.ModelName)>($"%{keyword.Trim()}%");
				} else {
					list = await Manager.SearchAsync<@(ViewBag.ModelName)>(
						$"%{keyword.Trim()}%",
						keyword_property.Select(x => FixPropertyCase(x)).ToArray()
					);
				}
			}

			// 匹配過濾
            if (!string.IsNullOrWhiteSpace(match)) {
                ExpandoObject matchObj = new ExpandoObject();
                @(ViewBag.ModelName) tempMatchObj = JsonConvert.DeserializeObject<@(ViewBag.ModelName)>(match);
                foreach (var kv in JObject.Parse(match)) {
                    matchObj.TryAdd(
						kv.Key,
						typeof(@(ViewBag.ModelName)).GetProperty(kv.Key).GetValue(tempMatchObj)
					);
                }
                list = list.Match(matchObj);
            }

			// 取得預設排序方法
            if (order == null || order.Length == 0) {
                order = typeof(@(ViewBag.ModelName))
					.GetCustomAttribute<DefaultOrderAttribute>()
					?.Properties;
            }

			// 排序方法設定
            if (order == null || order.Length == 0) {
                return list
                    .AsPaging(skip, take);
            } else {
                return list
                    .OrderBy(
                        order.Select(x => {
                            if (x[0] == '-') {
                                return (isDec: true, name: FixPropertyCase(x.Substring(1)));
                            } else {
                                return (isDec: false, name: FixPropertyCase(x));
                            }
                        }).ToArray()
                    )
                    .AsPaging(skip, take);
            }
        }

        /// <summary>
        /// 判斷指定實例是否存在
        /// </summary>
        /// <param name="id">唯一識別號</param>
        /// <returns>是否存在</returns>
        [HttpGet("{id}/exists")]
		public Task<bool> Exists(object id) {
            return Manager.ExistsAsync<@(ViewBag.ModelName)>(id);
        }

        /// <summary>
        /// 取得指定實例
        /// </summary>
        /// <param name="id">唯一識別號</param>
        /// <returns>目標實例</returns>
        [HttpGet("{id}")]
        public async Task<@(ViewBag.ModelName)> Get(
            [FromRoute]object id) {
            return await Manager.GetAsync<@(ViewBag.ModelName)>(id);
        }

        /// <summary>
        /// 建立實例
        /// </summary>
        /// <param name="instance">實例內容</param>
        /// <returns>新實例</returns>
        [HttpPost]
        public async Task<@(ViewBag.ModelName)> Create(
            [FromBody]@(ViewBag.ModelName) instance) {
            return await Manager.CreateAsync(instance);
        }

        /// <summary>
        /// 更新實例
        /// </summary>
        /// <param name="instance">實例內容</param>
        /// <returns>更新後的實例</returns>
        [HttpPut]
        public async Task<@(ViewBag.ModelName)> Update(
            [FromBody]@(ViewBag.ModelName) instance) {
            return await Manager.UpdateAsync(instance);
        }

        /// <summary>
        /// 刪除指定實例
        /// </summary>
        /// <param name="id">唯一識別號</param>
        /// <returns></returns>
        [HttpDelete("{id}")]
        public async Task Delete(object id) {
            await Manager.DeleteAsync<@(ViewBag.ModelName)>(id);
        }
    }
}
